#
# CQEN-QDCE Centre d'expertise appliquee en innovation
# Template openshift pour lancer des cronjobs qui font la sauvegarde de la BD
# dans un BUCKET S3 DANS AWS
# Author: Julio Cesar Torres <julio.cesartorresmcn.gouv.qc.ca> (@cesju02)
# Date: 2022/07/04
# SPDX-License-Identifier: LiLiQ-P
# 
apiVersion: v1
kind: Template
metadata:
  name: postgres-backup-s3-template
  annotations:
    description: 'Template for backup job adding files to S3 bucket'
    tags: 'database'
parameters:
  - name: DATABASE_BACKUP_KEEP
    description: 'Number of backups to keep'
    value: '7'
  - name: DATABASE_BACKUP_SCHEDULE
    description: 'Cron-like schedule expression'
    value: '0-55/5 * * * *'
  - name: DATABASE_USER
    description: 'database user'
    required: true
  - name: DATABASE_PASSWORD
    description: 'database user password'
    required: true
  - name: DATABASE_HOST
    description: 'Hostname of DB server'
    required: true
  - name: DATABASE_PORT
    description: 'DB Port'
    required: true
  - name: DATABASE_NAME
    description: 'Database to backup'
    required: true
  - name: DATABASE_BACKUP_VOLUME_CLAIM
    description: 'Name of the volume claim to be used as storage'
    required: true
  - name: AWS_ACCESS_KEY_ID
    description: 'Key identification to AWS access'
    required: true
  - name: AWS_SECRET_ACCESS_KEY
    description: 'Secret to the AWS Key'
    required: true
objects:
  - apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
      name: cronjob-bd-backup-s3
    spec:
      schedule: ${DATABASE_BACKUP_SCHEDULE}
      concurrencyPolicy: Forbid
      jobTemplate:
        spec:
          template:
            spec:
              volumes:
                - name: database-backup
                  persistentVolumeClaim:
                    claimName: ${DATABASE_BACKUP_VOLUME_CLAIM}
              containers:
                - name: database-backup
                  image: 'juliozohar/postgresaws:latest'
                  command:
                    - 'bash'
                    - '-eo'
                    - 'pipefail'
                    - '-c'
                    - > 
                      trap "echo Backup failed; exit 0" ERR; 
                      FILENAME=backup-${DATABASE_NAME}-`date +%Y-%m-%d_%H%M%S`Z.sql.gz;
                      time (PGPASSWORD="$DATABASE_PASSWORD" /usr/bin/pg_dump --username=$DATABASE_USER --host=$DATABASE_HOST --port=$DATABASE_PORT --column-inserts --clean --create ${DATABASE_NAME} | gzip > /database-backup/$FILENAME);
                      echo "";
                      echo "Backup successful"; du -h /database-backup/$FILENAME; 
                      echo "to restore the backup to the serviced host use: $ psql --username=$DATABASE_USER --password --host=$DATABASE_HOST --port=$DATABASE_PORT postgres < /database-backup/<backupfile> (unpacked)";
                      echo "";
                      echo "Backing up the file to S3 bucket";
                      echo $(aws configure list);
                      aws s3 cp /database-backup/$FILENAME s3://sonarqube-backup-repo/database-backup/$FILENAME;
                  env:
                    - name: DATABASE_BACKUP_KEEP
                      value: ${DATABASE_BACKUP_KEEP}
                    - name: DATABASE_USER
                      value: ${DATABASE_USER}
                    - name: DATABASE_PASSWORD
                      value: ${DATABASE_PASSWORD}
                    - name: DATABASE_HOST
                      value: ${DATABASE_HOST}
                    - name: DATABASE_PORT
                      value: ${DATABASE_PORT}
                    - name: DATABASE_NAME
                      value: ${DATABASE_NAME}
                    - name: TZ
                      value: America/New York
                    - name: AWS_ACCESS_KEY_ID
                      value: ${AWS_ACCESS_KEY_ID}
                    - name: AWS_SECRET_ACCESS_KEY
                      value: ${AWS_SECRET_ACCESS_KEY}
                    - name: AWS_DEFAULT_REGION
                      value: ca-central-1
                  volumeMounts:
                    - name: database-backup
                      mountPath: /database-backup
              restartPolicy: Never